{"version":3,"sources":["redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","views/CreateView.js"],"names":["getContacts","state","contacts","items","getFilter","filter","getError","error","getVisibleContacts","createSelector","search","toUpperCase","contact","name","includes","ContactForm","useSelector","dispatch","useDispatch","initialValues","number","validate","values","errors","onSubmit","setSubmitting","resetForm","newContactName","find","alert","addContactAsync","isSubmitting","htmlFor","type","id","component","disabled","style","color","textTransform","message","CreateView"],"mappings":"+IAAA,oJAEaA,EAAc,SAACC,GAAD,OAAWA,EAAMC,SAASC,OAExCC,EAAY,SAACH,GAAD,OAAWA,EAAMC,SAASG,QAEtCC,EAAW,SAACL,GAAD,OAAWA,EAAMC,SAASK,OAYrCC,EAAqBC,YAChC,CAACT,EAAaI,IACd,SAACF,EAAUG,GACT,IAAMK,EAASL,EAAOM,cACtB,OAAOT,EAASG,QAAO,SAACO,GAAD,OACrBA,EAAQC,KAAKF,cAAcG,SAASJ,U,iFCmD3BK,MApEf,WACE,IAAMb,EAAWc,YAAYhB,KACvBO,EAAQS,YAAYV,KACpBW,EAAWC,cAgCjB,OACE,qCACE,cAAC,IAAD,CACEC,cAAe,CAAEN,KAAM,GAAIO,OAAQ,IACnCC,SAlBc,SAACC,GACnB,IAAMC,EAAS,GAUf,OARKD,EAAOT,OACVU,EAAOV,KAAO,YAGXS,EAAOF,SACVG,EAAOH,OAAS,YAGXG,GAQHC,SAnCgB,SAACF,EAAD,GAA2C,IAAhCG,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACxCC,EAAiBL,EAAOT,KAAKF,cAKnC,GAJ2BT,EAAS0B,MAClC,qBAAGf,KAAgBF,gBAAkBgB,KAKrC,OADAF,GAAc,GACPI,MAAM,GAAD,OAAIF,EAAJ,6BAGdV,EAASa,YAAgBR,IACzBI,IACAD,GAAc,IAmBZ,SAKG,gBAAGM,EAAH,EAAGA,aAAH,OACC,eAAC,IAAD,WACE,uBAAOC,QAAQ,OAAf,kBACA,cAAC,IAAD,CAAOC,KAAK,OAAOpB,KAAK,OAAOqB,GAAG,SAClC,cAAC,IAAD,CAAcrB,KAAK,OAAOsB,UAAU,QAEpC,uBAAOH,QAAQ,cAAf,oBACA,cAAC,IAAD,CAAOC,KAAK,MAAMpB,KAAK,SAASqB,GAAG,gBACnC,cAAC,IAAD,CAAcrB,KAAK,SAASsB,UAAU,QAEtC,wBAAQF,KAAK,SAASG,SAAUL,EAAhC,+BAOLxB,GACC,oBAAI8B,MAAO,CAAEC,MAAO,MAAOC,cAAe,aAA1C,SACGhC,EAAMiC,cCvDFC,UAVf,WACE,OACE,qCACE,gDAEA,cAAC,EAAD","file":"static/js/create-view.bc4eb985.chunk.js","sourcesContent":["import { createSelector } from \"reselect\";\n\nexport const getContacts = (state) => state.contacts.items;\n\nexport const getFilter = (state) => state.contacts.filter;\n\nexport const getError = (state) => state.contacts.error;\n\n// export const getVisibleContacts = (state) => {\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n\n//   const search = filter.toUpperCase();\n//   return contacts.filter((contact) =>\n//     contact.name.toUpperCase().includes(search)\n//   );\n// };\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const search = filter.toUpperCase();\n    return contacts.filter((contact) =>\n      contact.name.toUpperCase().includes(search)\n    );\n  }\n);\n","import { Formik, Form, Field, ErrorMessage } from \"formik\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getContacts, getError } from \"../../redux/contacts/contacts-selectors\";\nimport { addContactAsync } from \"redux/contacts/contacts-operation\";\n\nfunction ContactForm() {\n  const contacts = useSelector(getContacts);\n  const error = useSelector(getError);\n  const dispatch = useDispatch();\n\n  const onSaveContact = (values, { setSubmitting, resetForm }) => {\n    const newContactName = values.name.toUpperCase();\n    const knownContactToName = contacts.find(\n      ({ name }) => name.toUpperCase() === newContactName\n    );\n\n    if (knownContactToName) {\n      setSubmitting(false);\n      return alert(`${newContactName} is already in contacts.`);\n    }\n\n    dispatch(addContactAsync(values));\n    resetForm();\n    setSubmitting(false);\n  };\n\n  const setValidate = (values) => {\n    const errors = {};\n\n    if (!values.name) {\n      errors.name = \"Required\";\n    }\n\n    if (!values.number) {\n      errors.number = \"Required\";\n    }\n\n    return errors;\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{ name: \"\", number: \"\" }}\n        validate={setValidate}\n        onSubmit={onSaveContact}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <label htmlFor=\"name\">Name</label>\n            <Field type=\"text\" name=\"name\" id=\"name\" />\n            <ErrorMessage name=\"name\" component=\"div\" />\n\n            <label htmlFor=\"phoneNumber\">Number</label>\n            <Field type=\"tel\" name=\"number\" id=\"phoneNumber\" />\n            <ErrorMessage name=\"number\" component=\"div\" />\n\n            <button type=\"submit\" disabled={isSubmitting}>\n              Add contact\n            </button>\n          </Form>\n        )}\n      </Formik>\n\n      {error && (\n        <h2 style={{ color: \"red\", textTransform: \"uppercase\" }}>\n          {error.message}\n        </h2>\n      )}\n    </>\n  );\n}\n\nexport default ContactForm;\n","import ContactForm from \"components/ContactForm\";\n\nfunction CreateView() {\n  return (\n    <>\n      <h1>Create contact</h1>\n\n      <ContactForm />\n    </>\n  );\n}\n\nexport default CreateView;\n"],"sourceRoot":""}