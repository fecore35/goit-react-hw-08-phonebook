{"version":3,"sources":["redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","views/CreateView.js"],"names":["getContacts","state","contacts","items","getFilter","filter","getError","error","getVisibleContacts","createSelector","search","toUpperCase","contact","name","includes","ContactForm","useSelector","dispatch","useDispatch","setValidate","yup","required","number","matches","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","resetForm","newContactName","find","alert","addContactAsync","Box","component","sx","m","width","noValidate","handleSubmit","autoComplete","TextField","fullWidth","id","label","value","onChange","handleChange","touched","Boolean","errors","helperText","Button","color","variant","type","style","textTransform","message","CreateView"],"mappings":"gJAAA,oJAEaA,EAAc,SAACC,GAAD,OAAWA,EAAMC,SAASC,OAExCC,EAAY,SAACH,GAAD,OAAWA,EAAMC,SAASG,QAEtCC,EAAW,SAACL,GAAD,OAAWA,EAAMC,SAASK,OAYrCC,EAAqBC,YAChC,CAACT,EAAaI,IACd,SAACF,EAAUG,GACT,IAAMK,EAASL,EAAOM,cACtB,OAAOT,EAASG,QAAO,SAACO,GAAD,OACrBA,EAAQC,KAAKF,cAAcG,SAASJ,U,wHC2E3BK,MAtFf,WACE,IAAMb,EAAWc,YAAYhB,KACvBO,EAAQS,YAAYV,KACpBW,EAAWC,cAqBXC,EAAcC,IAAW,CAC7BP,KAAMO,IAAW,cAAcC,SAAS,oBACxCC,OAAQF,IACE,sBACPG,QANH,0GAMwB,6BACrBF,SAAS,8BAGRG,EAASC,YAAU,CACvBC,cAAe,CACbb,KAAM,GACNS,OAAQ,IAEVK,iBAAkBR,EAClBS,SAjCoB,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UACxCC,EAAiBH,EAAOhB,KAAKF,cAKnC,GAJ2BT,EAAS+B,MAClC,qBAAGpB,KAAgBF,gBAAkBqB,KAKrC,OADAF,GAAc,GACPI,MAAM,GAAD,OAAIF,EAAJ,6BAGdf,EAASkB,YAAgBN,IACzBE,IACAD,GAAc,MAuBhB,OACE,qCACE,eAACM,EAAA,EAAD,CACEC,UAAU,OACVC,GAAI,CACF,kBAAmB,CAAEC,EAAG,EAAGC,MAAO,SAEpCC,YAAU,EACVb,SAAUJ,EAAOkB,aACjBC,aAAa,MAPf,UASE,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,GAAG,OACHjC,KAAK,OACLkC,MAAM,OACNC,MAAOxB,EAAOK,OAAOhB,KACrBoC,SAAUzB,EAAO0B,aACjB3C,MAAOiB,EAAO2B,QAAQtC,MAAQuC,QAAQ5B,EAAO6B,OAAOxC,MACpDyC,WAAY9B,EAAO2B,QAAQtC,MAAQW,EAAO6B,OAAOxC,OAEnD,cAAC+B,EAAA,EAAD,CACEC,WAAS,EACTC,GAAG,SACHjC,KAAK,SACLkC,MAAM,eACNC,MAAOxB,EAAOK,OAAOP,OACrB2B,SAAUzB,EAAO0B,aACjB3C,MAAOiB,EAAO2B,QAAQ7B,QAAU8B,QAAQ5B,EAAO6B,OAAO/B,QACtDgC,WAAY9B,EAAO2B,QAAQ7B,QAAUE,EAAO6B,OAAO/B,SAErD,cAACiC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAQ,YAAYZ,WAAS,EAACa,KAAK,SAA3D,4BAKDnD,GACC,oBAAIoD,MAAO,CAAEH,MAAO,MAAOI,cAAe,aAA1C,SACGrD,EAAMsD,cCjFFC,UARf,WACE,OACE,mCACE,cAAC,EAAD","file":"static/js/create-view.beb40a5b.chunk.js","sourcesContent":["import { createSelector } from \"reselect\";\n\nexport const getContacts = (state) => state.contacts.items;\n\nexport const getFilter = (state) => state.contacts.filter;\n\nexport const getError = (state) => state.contacts.error;\n\n// export const getVisibleContacts = (state) => {\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n\n//   const search = filter.toUpperCase();\n//   return contacts.filter((contact) =>\n//     contact.name.toUpperCase().includes(search)\n//   );\n// };\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const search = filter.toUpperCase();\n    return contacts.filter((contact) =>\n      contact.name.toUpperCase().includes(search)\n    );\n  }\n);\n","import { useFormik } from \"formik\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getContacts, getError } from \"../../redux/contacts/contacts-selectors\";\nimport { addContactAsync } from \"redux/contacts/contacts-operation\";\n\n/* yup: value validation */\nimport * as yup from \"yup\";\n\n/* Material UI */\nimport { Box, Button, TextField } from \"@mui/material\";\n\nfunction ContactForm() {\n  const contacts = useSelector(getContacts);\n  const error = useSelector(getError);\n  const dispatch = useDispatch();\n\n  const onSaveContact = (values, { setSubmitting, resetForm }) => {\n    const newContactName = values.name.toUpperCase();\n    const knownContactToName = contacts.find(\n      ({ name }) => name.toUpperCase() === newContactName\n    );\n\n    if (knownContactToName) {\n      setSubmitting(false);\n      return alert(`${newContactName} is already in contacts.`);\n    }\n\n    dispatch(addContactAsync(values));\n    resetForm();\n    setSubmitting(false);\n  };\n\n  const phoneRegExp =\n    /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\n  const setValidate = yup.object({\n    name: yup.string(\"Enter name\").required(\"Name is required\"),\n    number: yup\n      .string(\"Enter Phone number\")\n      .matches(phoneRegExp, \"Phone number is not valid\")\n      .required(\"Phone number is required\"),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      number: \"\",\n    },\n    validationSchema: setValidate,\n    onSubmit: onSaveContact,\n  });\n\n  return (\n    <>\n      <Box\n        component=\"form\"\n        sx={{\n          \"& > :not(style)\": { m: 1, width: \"100%\" },\n        }}\n        noValidate\n        onSubmit={formik.handleSubmit}\n        autoComplete=\"off\"\n      >\n        <TextField\n          fullWidth\n          id=\"name\"\n          name=\"name\"\n          label=\"Name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n        <TextField\n          fullWidth\n          id=\"number\"\n          name=\"number\"\n          label=\"Phone number\"\n          value={formik.values.number}\n          onChange={formik.handleChange}\n          error={formik.touched.number && Boolean(formik.errors.number)}\n          helperText={formik.touched.number && formik.errors.number}\n        />\n        <Button color=\"primary\" variant=\"contained\" fullWidth type=\"submit\">\n          Add contact\n        </Button>\n      </Box>\n\n      {error && (\n        <h2 style={{ color: \"red\", textTransform: \"uppercase\" }}>\n          {error.message}\n        </h2>\n      )}\n    </>\n  );\n}\n\nexport default ContactForm;\n","import ContactForm from \"components/ContactForm\";\n\nfunction CreateView() {\n  return (\n    <>\n      <ContactForm />\n    </>\n  );\n}\n\nexport default CreateView;\n"],"sourceRoot":""}